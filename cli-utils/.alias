
# ***** ***** git ***** *****
alias ga="git add"
alias gb="git branch"
alias gc="git commit -m"
alias gco="git checkout"
alias gd="git diff"
alias gl="git log"
alias gs="git status"
alias ghistory="git log --follow -p" # > ghistory $fileName
alias gclean="git clean -fd"
alias gstash="git stash"
alias gstashu="git stash --include-untracked"
# The -G option is equivalent to defining CLICOLOR in the environment.
# the -h makes it human readable, and -F shows / after dir and @ after executable.
alias ls="ls -GFh"
# git grep:
alias gls="git log --grep=$GIT_SEARCH"

# ***** ***** flatpak ***** *****
alias flatmote="flatpak remotes"
alias flatmote-add="flatpak remote-add --if-not-exists $FLAT_APP_NAME $REMOTE_REPO"
alias flatmote-rmv="flatpak remote-delete $FLAT_APP_NAME"
alias flat-srch="flatpak search $FLAT_APP_NAME"
alias flat-hub-install="flatpak install flathub $FLAT_IDENTIFIER" # eg org.gimp.GIMP
alias flat-install-dryrun="flatpak install $FLAT_APP_NAME" # will search, and confirm remote before downloading
alias flat-run="flatpak run $FLAT_IDENTIFIER"
alias flat-ls="flatpak list"
alias flat-history="flatpak history"
alias flat-build="flatpak-builder $BUILD_DIR $MANIFEST_FILE"

# ***** ***** dnf ***** *****
# repoquery --whatprovides a package:
# sudo dnf repoquery --whatprovides "pkgconfig(libsystemd)"

# ***** ***** WPE API Tests ***** *****
# /app/webkit/Tools/glib/../../WebKitBuild/Release/bin/TestWebKitAPI/WPE/TestLoaderClient
# /app/webkit/Tools/glib/../../WebKitBuild/Release/bin/TestWebKitAPI/WPE/TestWebProcessExtensions
alias wpetest-api="run-wpe-tests --release $WPE_TEST_PATH"

# ***** ***** libsoup ***** *****
alias libsoup-meson="meson _build --prefix=/usr"
alias libsoup-ninja="sudo ninja -C _build install"
alias libsoup-test="meson test -C _build"

# ***** ***** WebKit ***** *****
# GTK
alias webkitgtk-deps="./Tools/gtk/install-dependencies"
alias webkitgtk-libs="update-webkitgtk-libs"
alias webkitgtk-build="build-webkit --gtk --release --cmakeargs='-DENABLE_THUNDER=OFF'"
# WPE
alias webkitwpe-deps="./Tools/wpe/install-dependencies"
alias webkitwpe-libs="update-webkitwpe-libs"
alias webkitwpe-build="build-webkit --wpe --release --cmakeargs='-DENABLE_THUNDER=OFF'"

# get into container
alias webkit-container="webkit-flatpak --gtk -c bash"
# test
alias webkitgtk-test="run-webkit-tests --release --gtk $testName"
# lint
alias webkit-style="check-webkit-style"
# patch
alias webkit-patch="webkit-patch --all-commands"

# ***** WebKit Flatpak SDK *****
# Setup Flatpak SDK for WebKit:
alias webkit-setup-flatpak="update-webkit-flatpak"
# This will fetch Flatpak SDK and place it in ./WebKitBuild/UserFlatpak.

# Mappings are as such. For flags: --release --gtk:
# - Host Path is ./WebKitBuild/GTK/Release
# - Sandbox Path is ./WebKitBuild/Release

# * Use Case: run gdb with Flatpak SDK (Trac docs) with gdbserver:
# Terminal 1: Run gdbserver on the target system, e.g. target> gdbserver comm program [ args â€¦ ]
# Target system is minibrowser; we'll use tcp
alias webkit-gdbserver="WEB_PROCESS_CMD_PREFIX='/usr/bin/gdbserver --no-startup-with-shell localhost:9090' Tools/Scripts/run-minibrowser --gtk --release"
# Terminal 2:  Connect gdb to remote target inside flatpak sdk sandbox
# 1. Get into the sandbox
alias webkit-sandbox="webkit-flatpak --release /app/webkit/WebKitBuild/Release/bin/WebKitWebProcess"
# 2. Run gdb, in the sandbox
# > gdb
# 3. Target the correct port, running gdbserver:
# > target remote localhost:9090
# 4. Debug normally, like how a "human" would do.

# * Use Case: run gdb with Flatpak SDK (Trac docs):
# Terminal 1:
# > run-minibrowser --gtk --release $URL
# Terminal 2:
# > flatpak ps
# get into the container:
# > sudo flatpak enter $FLATPAKPID /bin/bash
# Attach gdb to existing process:
# > gdb attach $(/bin/pidof /app/webkit/WebKitBuild/Release/bin/WebKitWebProcess)
# NOTE: Attach to gdbserver inside the container so that target and debugger are in same PID ns.

# * Use Case: run gdb:
# > webkit-flatpak --gtk --release -c gdb -c /path/to/executable ...
# > webkit-flatpak --gtk --release -c gdb -c ./WebKitBuild/Release

# * Use Case: run commands inside sandbox:
# Tools/Scripts/webkit-flatpak --wpe --release -c $COMMAND

# * Use Case: drop into a shell inside the sandbox:
# Tools/Scripts/webkit-flatpak --wpe --release -c bash

# WebKit Intellisense / Deunified Builds
# WebKit's CMake files do "unified builds", grouping multiple cpp files into one to speed up compilation.
# This is performant, but breaks smart IDEs' ability to map single cpp files to compile commands.
# So, you have to configure the project without unified builds. This often is broken (unsupported by Apple).
# So, after you configure the project without unified builds:
alias webkit-toolbox-build-deunified="build-webkit --gtk --debug --cmakeargs='-DENABLE_THUNDER=OFF -DENABLE_UNIFIED_BUILDS=OFF'"
# ^ This will create a compile_commands json file in the build dir ./WebKitBuild/Release...
# You can now configure C_Cpp.default.compileCommands to use this file
# (in ./.vscode/c_cpp_properties.json, in "configurations" array, 
# set "compileCommands": "${workspaceFolder}/WebKitBuild/Release/compile_commands.json")
# That's how to configure VSCode to use Intellisense for the WebKit project.

# Run GTK minibrowser
alias webkitgtk-minibrowser="run-minibrowser --gtk --release"

# *** variables / cmake:
# variables/optargs passed into cmake args all begin with -D. So if you use --cmakeargs='-DEVELOPER_MODE', it's actually EVELOPER MODE.
alias webkit-build-devmode="build-webkit --gtk --release --cmakeargs='-DENABLE_THUNDER=OFF -DDEVELOPER_MODE=ON'"
# The above switches dev mode to on. Strangely, one can also `--enable-developer-extras=true` during runtime...
# supposedly all GTK builds have developer mode on.... but yeah.

# Looking at env vars/settings/flags: OptionsGTK.cmake ... WebPreferences[Debug].yaml ... webkitdirs.pm ...
alias webkit-args=`export BUILD_WEBKIT_ARGS="-DDEVELOPER_MODE=ON --cmakeargs=-DENABLE_THUNDER=OFF"`

# Minibrowser Web Inspector Remote
    # set the environment variable WEBKIT_INSPECTOR_SERVER=ip:port before running jsc or a browser/launcher powered by WPE or WebKitGTK+
    # enable the WebKitSettings enable-developer-extras
# export WEBKIT_INSPECTOR_HTTP_SERVER=127.0.0.1:1234
# export WEBKIT_INSPECTOR_SERVER=127.0.0.1:1234
# run-minibrowser --gtk
# Then open another terminal to open another browser:
#  export WEBKIT_INSPECTOR_HTTP_SERVER=127.0.0.1:1234
#  run-minibrowser --gtk
# navigate to http://localhost:1234
# other opt args can include:
#  run-minibrowser --gtk --enable-developer-extras=true inspector://127.0.0.1:1234

# Remote Web Inspector for WPE with rpi
# export WEBKIT_INSPECTOR_HTTP_SERVER="IP_address_of_your_RPi:9224" -> use on laptop


# ***** ***** homebrew ***** *****
alias brewl="brew list"
alias brews="brew search"
alias brewcask="brew cask list"
alias brewsvc="brew services list"

# ***** ***** go ***** *****
# gopher
alias gtidy="go mod tidy"

# Go run all files in pwd
alias grun="go run ./..."
# Go build executable (you'll then run binary directly...)
alias gobuild="go build ."

# Docs
alias godocs='godoc --http :6060'

# Test
alias gtest="go test ./..."
alias gtestint="go test --tags=integration"
alias gtestclean="go clean -testcache"

# ***** ***** Kubernetes ***** *****
alias k="kubectl"
alias po="pods"
alias svc="services"
alias deploy="deployment"

alias k-view="kubectl config view"

## k8s context: see also kubectx binary and kubens binary.
alias k-context="kubectl config current-context"
alias k-context-dev="kubectl config use-context $CLUSTER"

alias kpods-$NAMESPACE="kubectl get pods -o wide -L chart -L tag -n $NAMESPACE"
alias kpods-deleteit="kubectl delete deploy -n $NAMESPACE --context $CLUSTER your-app"

# See headroom in a ns
alias k-headroom="kubectl --context $CLUSTER describe resourcequota -n $NAMESPACE"
# (tip: You can use Grafana deployment object, or similar metrics, to see what it's actually using.)
# Also see resource profiles for your system.

# ***** ***** gcloud cli ***** *****
alias gcloud-auth='gcloud auth login'
# gcloud config set project $PROJECT_ID
# gcloud container clusters get-credentials $CLUSTER --region $REGION --project $PROJECT

# ***** ***** Python ***** *****
# alias python="python3" # becuz python 3.7, see brew.bootstrap.sh
alias pip="pip3"

# ***** ***** GnuPG ***** *****
alias pgp-keygen="gpg --gen-key && (gpg --export $EMAIL | base64)"
alias gpg-list="gpg --list-keys"
alias gpg-export="gpg --armor --export $EMAIL > ~/$YOUR_USERNAME.asc"
# Import someone's public key using key server: 
alias gpg-import="gpg --keyserver hkps://keys.openpgp.org --recv-keys 0x......."
# Check fingerprint of a key:
alias gpg-fingerprint="gpg --fingerprint $THEIR_EMAIL"
# Verify a key using the web of trust:
alias gpg-verify="gpg --list-signatures $THEIR_EMAIL"
# paste, encrypt and sign message:
alias gpg-message=" gpg --encrypt --sign --armor --output ~/Desktop/encrypted.asc --recipient $EMAIL --recipient $THEIR_EMAIL"
# Decrypt message to stdout and decode quoted-printable characters:
alias pgp-decrypt="gpg --decrypt ~/Desktop/encrypted.asc | perl -MMIME::QuotedPrint -0777 -nle 'print decode_qp($_)'"
# Clear passphrase from GnuPG cache:
alias gpg-done="gpg-connect-agent reloadagent /bye"

# ***** ***** random stuff ***** *****

# MySQL
alias mysql-login="mysql --host=localhost --port=0000 --user=fakeuser --password=fake-auth"
alias mysql-login2="mysql -u fakeuser -h mysql.domain.com -p fake-auth"
# > show databases;
# > show tables;
# > desc user; // schemas, structure.
# > describe tableName; // schemas, structure.
# > select user, host, authentication_string from mysql.user; // later versions of mysql...
# > $ mysql --host=localhost DBNAME --port=0000 --user=fakeuser --password=fake-auth
# > mysql.server start # .stop startup ... auto launch w launchctl

# postgres
# start:
alias pgstart="pg_ctl -D /usr/local/var/postgres start"
# stop:
alias pgstop="pg_ctl -D /usr/local/var/postgres stop"
# get into db:
alias pg="psql -d postgres"
# psql
# HELP: \?
# LIST DATABASES: \l
# CONNECT TO DB: \c db_name
# LIST RELATIONS: \d
# DESCRIBE A TABLE: \d table_name
# LIST AVAILABLE SCHEMA: \dn
# LIST AVAILABLE FUNCTIONS: \df
# LIST AVAILABLE VIEWS: \dv
# COMMAND HISTORY: \s
